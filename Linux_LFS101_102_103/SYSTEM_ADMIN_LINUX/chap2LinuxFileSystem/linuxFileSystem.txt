CHAPTER 2 LINUX FILE SYSTEM

By the end of this chapter, you should be able to:

->Explain why Linux requires the organization of one big filesystem tree, and what the major considerations are for how it is done.

->Know the role played by the Filesystem Hierarchy Standard.

->Describe what must be available at boot in the root (/) directory, and what can be available only once the system has started.

->Explain each of the main subdirectory trees in terms of purpose and contents.

DATA DISTINCTIOINS

When talking about how files and data are organized in the one big directory tree, it is important to learn some taxonomy on what kind of information has to be read and written. In particular there are two kinds of distinctions:

	Shareable vs. non-shareable
	Shareable data is that which can be shared between different hosts. Non-shareable data is that which must be specific to a particular host. For example, user home directories may be shareable, while device lock files are not.

	Variable vs. static
	Static data include binaries, libraries, documentation, and anything that does not change without system administrator assistance. Variable data is anything that may change even without a system administrator's help.

Often these logical distinctions are embodied as different kinds of information residing in various directories, or even partitions and filesystems.

MAIN DIRECTORY LAYOUT

Directory		In FHS?		Purpose
/				Yes			Primary directory of the entire file system hierarchy.

/bin 			Yes			Essential executable programs that must be available in single user mode.

/boot 			Yes			Files needed to boot the system, such as the kernel, initrd or initramfs images, and boot configuration files and bootloader programs.

/dev 			Yes			Device Nodes, used to interact with hardware and software devices.

/etc			Yes			System wide configuration files.

/home 			Yes			User home directories including personal settings, files, etc.

MAIN DIRECTORY LAYOUT II 

There may be additional distribution-specific directories found under the root directory. These might include /misc, which can be used for miscellaneous data, and /tftpboot, which is used for booting using tftp. If there are files in the directory, they are related to diskless workstation booting. Note that it does not violate the FHS to have other directories; however, it does violate it to have components in directories other than those dictated by the standard.

THE ROOT (/)

While the entire filesystem can be viewed as one big tree, as we have pointed out, there may be multiple partitions and filesystems joined together.

The partition and filesystem that the root directory itself is contained in is rather special and is often in a special dedicated partition, with other components with directories such as /home, /var and /opt etc. to be mounted later. 

The root partition must contain all essential files required to boot the system and then mount all other file systems. Thus, it needs utilities, configuration files, boot loader information, and other essential startup data. It must be adequate to:

	Boot the system.​

	Restore the system from system backups on external media such as tapes and other removable media or NAS etc.​

	Recover and/or repair the system; an experienced maintainer must have the tools to diagnose and reconstruct a damaged system.

According to the FHS, no application or package should create new subdirectories of the root directory.

THE /bin I

The /bin directory is very important and it:
Contains executable programs and scripts needed by both system administrators and unprivileged users, which are required when no other filesystems have yet been mounted, for example when booting into single user or recovery mode.

May also contain executables which are used indirectly by scripts.

May not include any subdirectories.

THE /bin II

Required programs which must exist in /bin/ include:
cat, chgrp, chmod, chown, cp, date, dd, df, dmesg, echo, false, hostname, kill, ln, login, ls, mkdir, mknod, more, mount, mv, ps, pwd, rm, rmdir, sed, sh, stty, su, sync, true, umount and uname. [ and test may be there as well, and optionally, it may include: csh, ed, tar, cpio, gunzip, zcat, netstat and ping.

Command binaries that are deemed nonessential enough to merit a place in /bin go in /usr/bin. Programs required only by non-root users are placed in this category.

Note: Some very recent distributions are abandoning the strategy of separating /bin and /usr/bin (as well as /sbin and /usr/sbin) and just have one directory with symbolic links, thereby preserving a two directory view. They view the time-honored concept of enabling the possibility of placing /usr on a separate partition to be mounted after boot as obsolete.

THE /boot I

Essential files for booting the system must be in the /boot directory and its subdirectories. The two files which are absolutely essential are:

	vmlinuz 
	The compressed Linux kernel.

	initramfs 
	The initial RAM Filesystem, which is mounted before the real root filesystem becomes available.

These files have longer names which depend on the kernel version, with the exact form depending on the Linux distribution. In addition, instead of initramfs, the file may be called initrd, which stands for initial RAM disk, which was the older method, but the name survives.

/boot stores data used before the kernel begins executing user-mode programs. It may include saved master boot sectors, sector map files, and other data that is not directly edited by hand. The exact contents of /boot will vary by distribution and time; on the next page, you can see an example of what we have on one RHEL 7 system.

Once upon a time, these essential files were often placed directly in /, rather than in a separate /boot directory, following traditional UNIX practices. Today this is considered obsolete.

You may have already noticed that there are multiple kernel versions available in /boot and, for each one, there are four files available. (Choice between kernels will be made by using GRUB at boot time.)

The other two files besides the vmlinuz and initramfs are:

	config 
	The configuration file used when compiling the kernel. It is really here just for bookkeeping and reference when debugging.

	System.map 
	The kernel symbol table, which is very useful for debugging. It gives the hexadecimal addresses of all kernel symbols.

Neither of these files is required for booting or running the system.
Distributions may place other files and directories in /boot, such as saved master boot sectors and other data not hand-edited.

THE /dev

This directory contains special device files (also known as device nodes) which represent devices built into or connected to the system. These special files are essential for the system to function properly. 
Such device files represent character (byte-stream) and block I/O devices. 

Network devices do not have device nodes in Linux, and are instead referenced by name, such as eth1 or wlan0.

THE /etc

This directory contains machine-local configuration files and some startup scripts; there should be no executable binary programs. Files and directories which may be found in this directory include:

	csh.login, exports, fstab, ftpusers, gateways, gettydefs, group, host.conf, hosts.allow, hosts.deny, hosts,equiv, hosts.lpd, inetd.conf, inittab, issue, ld.so.conf, motd, mtab, mtools.conf, networks, passwd, printcap, profile, protocols, resolv.conf, rpc, securetty, services, shells, syslog.conf.

Distributions often add configuration files and directories to /etc. For example, Red Hat adds a number of other directories, including /etc/sysconfig, where a number of system configuration files and directories live.

Other important subdirectories include /etc/skel, which contains skeleton files used to populate newly created home directories, and /etc/init.d, which contains start up and shut down scripts when using System V initialization.

THE /home I

On Linux systems, user directories are conventionally placed under /home, as in /home/coop, /home/student, etc. All personal configuration, data, and executable programs are placed in this directory hierarchy. /home may also contain subdirectories for various groups or associations of users, such as /home/students, /home/staff, /home/aliens etc.

On other UNIX-like operating systems, the concept of the /home directory tree exists, but can be subtly different. For example, on Solaris user directories are created in /export/home and then, the automount facility will eventually mount them in /home. This is because the usual situation is that the home directory may be anywhere on a corporate network, probably on an NFS server, and the home directory will be mounted automatically upon use.

Linux has these same automount facilities, but many users are not even aware of them, and, on self-contained systems, the concept of NFS mounts will probably not apply.

A given user can always substitute the environmental variable $HOME for their root directory, or the shorthand ~; i.e., the following are equivalent:

$ ls -l $HOME/public_html
$ ls -l ~/public_html

There is one exception: the home directory for the root user on Linux systems is always found under /root. Some older UNIX systems may use / instead, which can cause clutter.

THE /lib and /lib64

These directories should contain only those libraries needed to execute the binaries in /bin and /sbin. These libraries are particularly important for booting the system and executing commands within the root filesystem.
Kernel modules (often device or filesystem drivers) are located under /lib/modules/<kernel-version-number>.

PAM (Pluggable Authentication Modules) files are stored in the /lib/security.
Systems which support both 32-bit and 64-bit binaries must keep both kinds of libraries on the system. On Red Hat-based systems there are separate directories for 32-bit libraries (/lib) and 64-bit libraries (/lib64).

THE /media

This directory is typically used to mount filesystems on removable media. These include CDs, DVDs, and USB drives, and even paleolithic era floppies.

Modern Linux systems mount such media dynamically upon insertion, and udev creates directories under /media and then mounts the removable filesystems there, with names that are set with udev rules specified in configuration files. Upon unmounting and removal, the directories used as mount points under /media will disappear.

If the media has more than one partition and filesystem, more than one entry will appear on /media. On many Linux distributions the file manager (such as Nautilus) will pop up when the media is mounted.

Note: On some newer distributions (including SUSE and RHEL 7) removable media will pop up under /run/media/[username]/.... We will discuss /run at the end of this section.

THE /mnt

This directory is provided so that the system administrator can temporarily mount a filesystem when needed. A common use is for network filesystems, including: 

NFS
Samba
CIFS
AFS

Historically, /mnt was also used for the kinds of files which are now mounted under /media (or /run/media) in modern systems.

Generally speaking, this directory should not be used by installation programs. Another temporary directory not currently being used serves better.

THE /opt

This directory is designed for software packages that wish to keep all or most of their files in one isolated place, rather than scatter them all over the system in directories shared by other software. For example, if dolphy_app were the name of a package which resided under /opt, then all of its files should reside in directories under /opt/dolphy_app, including /opt/dolphy_app/bin for binaries and /opt/dolphy_app/man for any man pages.

This can make both installing and uninstalling software relatively easy, as everything is in one convenient isolated location in a predictable and structured manner. It also makes it easier for system administrators to determine the nature of each file within a package.

Note, however, if one uses packaging systems such as RPM and APT, as we shall discuss later, it is also easy to install and uninstall with a clear sense of file manifests and locations, without exhibiting such antisocial behavior.
In Linux, the /opt directory is often used by application providers with either proprietary software, or those who like to avoid complications of distribution variance. For example, on the RHEL 7 system this is being prepared on, the only packages are in /opt/skype and /opt/google and the latter has subdirectories for chrome, earth, and talkplugin.

The directories /opt/bin, /opt/doc, /opt/include, /opt/info, /opt/lib, and /opt/man are reserved for local system administrator use. Packages may provide files which are linked or copied to these reserved directories, but the packages must also be able to function without the programs being in these special directories.

THE /proc I

This directory is the mount point for a pseudo-filesystem, where all information resides only in memory, not on disk. Like /dev, the /proc directory is empty on a non-running system.

The kernel exposes some important data structures through /proc entries. Additionally, each active process on the system has its own subdirectory that gives detailed information about the state of the process, the resources it is using, and its history. 

The entries in /proc are often termed virtual files and have interesting qualities. While most are listed as zero bytes in size, when viewed, they can contain a large amount of information.

In addition, most of the time and date settings on virtual files reflect the current time and date, indicative of the fact they are constantly changing. In fact, the information in these files is obtained only when they are viewed; they are not being constantly or periodically updated.

Important pseudo-files, including /proc/interrupts, /proc/meminfo, /proc/mounts, and /proc/partitions, provide an up-to-the-moment glimpse of the system's hardware.

Others, like /proc/filesystems and the /proc/sys/ directory, provide system configuration information and interfaces.

For organizational purposes, files containing information on a similar topic are grouped into virtual directories and sub-directories. For instance, /proc/scsi/ contains information for all physical SCSI devices. Likewise, the process directories contain information about each running process on the system.

We will extensively examine entries in /proc throughout this course, and we will take a more detailed look at them in upcoming chapters about kernel configuration and system monitoring.

THE /sys

This directory is the mount point for the sysfs pseudo-filesystem where all information resides only in memory, not on disk. Like /dev and /proc, the /sys directory is empty on a non-running system.

sysfs is used both to gather information about the system, and modify its behavior while running. In that sense, it resembles /proc, but it is younger than and has adhered to strict standards about what kind of entries it can contain. For example, almost all pseudo-files in /sys contain only one line, or value; there are none of the long entries you can find in /proc.

As with /proc, we will examine entries in /sys throughout this course, and it will become relevant in upcoming chapters about kernel configuration and system monitoring.

THE /root

This directory (pronounced "slash-root") is the home directory for the root user.

The root account that owns this directory should only be used for actions which require superuser privilege. For those actions which can be done as a non-privileged user, use another account. 

THE /sbin I

This directory contains binaries essential for booting, restoring, recovering, and/or repairing in addition to those binaries in the /bin directory. They also must be able to mount other filesystems on /usr, /home and other locations if needed, once the root filesystem is known to be in good health during boot.

The following programs should be included in this directory (if their subsystems are installed):

fdisk, fsck, getty, halt, ifconfig, init, mkfs, mkswap, reboot, route, swapon, swapoff, update.

Note: As mentioned before, some very recent distributions are abandoning the strategy of separating /sbin and /usr/sbin (as well as /bin and /usr/bin) and just having one directory with symbolic links preserving a two directory view.

THE /srv

This directory contains site-specific data which is served by this system.
The main purpose of specifying this is so that users may find the location of the data files for a particular service, and so that services which require a single tree for read-only data, writable data and scripts (such as cgi scripts) can be reasonably placed.

The methodology used to name the subdirectories of /srv is unspecified, as there is currently no consensus on how this should be done. One method for structuring data under /srv is by protocol, eg. ftp, rsync, www, and cvs.

Some system administrators (and distributions) swear by the use of /srv ; others ignore it. There is often confusion about what is best to go in /var as opposed to /srv .

THE /tmp

This directory is used to store temporary files, and can be accessed by any user or application. However, the files on /tmp cannot be depended on to stay around for a long time:

Some distributions run automated cron jobs, which remove any files older than 10 days typically, unless the purge scripts have been modified to exclude them. This is the RHEL 6 policy. 

Some distributions remove the contents of /tmp with every reboot. This has been the Ubuntu policy. 

Some modern distributions utilize a virtual filesystem, using the /tmp directory only as a mount point for a ram disk using the tmpfs filesystem. This is the default policy of recent Fedora systems. When the system reboots, all information is thereby lost; /tmp is indeed temporary!  

In the last case, one must avoid creating large files on /tmp: they will actually occupy space in memory rather than disk, and it is easy to harm or crash the system through memory exhaustion. While the guideline is for applications to avoid putting large files in /tmp, there are plenty of applications that violate this policy and which make large temporary files in /tmp. Even if it is possible to put them somewhere else (perhaps by specifying an environment variable), many users are not aware of how to configure this and all users have access to /tmp.

This policy can be canceled on systems using systemd, such as Fedora, by issuing the command: 
$ sudo systemctl mask tmp.mount
followed by a system reboot.

THE /usr I

The /usr directory can be thought of as a secondary hierarchy. It is used for files which are not needed for system booting. Indeed, /usr need not reside in the same partition as the root directory, and can be shared among hosts using the same system architecture across a network.

Software packages should not create subdirectories directly under /usr. Some symbolic links may exist to other locations for compatibility purposes.

This directory is typically read-only data. It contains binaries which are not needed in single user mode. It contains the /usr/local directory, where local binaries and such may be stored. man pages are stored under /usr/share/man.

Note: Some very recent distributions are abandoning the strategy of separating /bin and /usr/bin (as well as /sbin and /usr/sbin ) and just have one directory with symbolic links, thereby preserving a two directory view. They view the time-honored concept of enabling the possibility of placing /usr on a separate partition to be mounted after boot as obsolete.

THE /usr II

You can take a close look at the directories under /usr:
 
Directory     Purpose 

/usr/bin 	  Non-essential binaries and scripts, not needed for single user mode. Generally, this means user applications not needed to start the system

/usr/exact 	  Non-essential configuration files (usually empty)

/usr/games    Game data

/usr/include  Header files used to compile applications

/usr/lib      Library files

/usr/lib64    Library files for 64-bit 

/usr/local 	  Third-level hierarchy (for machine local files)

/usr/sbin 	  Non-essential system binaries

/usr/share    Read-only architecture-independent files

/usr/src 	  Source code and headers for the Linux kernel

/usr/tmp      Secondary temporary director


